// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package dockertest

import (
	"context"
	"io"

	"github.com/docker/docker/api/types/container"
	"github.com/docker/docker/api/types/image"
	"github.com/replicate/cog/pkg/docker/command"
	mock "github.com/stretchr/testify/mock"
)

// NewMockCommand2 creates a new instance of MockCommand2. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCommand2(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCommand2 {
	mock := &MockCommand2{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCommand2 is an autogenerated mock type for the Command type
type MockCommand2 struct {
	mock.Mock
}

type MockCommand2_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCommand2) EXPECT() *MockCommand2_Expecter {
	return &MockCommand2_Expecter{mock: &_m.Mock}
}

// ContainerInspect provides a mock function for the type MockCommand2
func (_mock *MockCommand2) ContainerInspect(ctx context.Context, id string) (*container.InspectResponse, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for ContainerInspect")
	}

	var r0 *container.InspectResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*container.InspectResponse, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *container.InspectResponse); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.InspectResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCommand2_ContainerInspect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerInspect'
type MockCommand2_ContainerInspect_Call struct {
	*mock.Call
}

// ContainerInspect is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockCommand2_Expecter) ContainerInspect(ctx interface{}, id interface{}) *MockCommand2_ContainerInspect_Call {
	return &MockCommand2_ContainerInspect_Call{Call: _e.mock.On("ContainerInspect", ctx, id)}
}

func (_c *MockCommand2_ContainerInspect_Call) Run(run func(ctx context.Context, id string)) *MockCommand2_ContainerInspect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockCommand2_ContainerInspect_Call) Return(inspectResponse *container.InspectResponse, err error) *MockCommand2_ContainerInspect_Call {
	_c.Call.Return(inspectResponse, err)
	return _c
}

func (_c *MockCommand2_ContainerInspect_Call) RunAndReturn(run func(ctx context.Context, id string) (*container.InspectResponse, error)) *MockCommand2_ContainerInspect_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerLogs provides a mock function for the type MockCommand2
func (_mock *MockCommand2) ContainerLogs(ctx context.Context, containerID string, w io.Writer) error {
	ret := _mock.Called(ctx, containerID, w)

	if len(ret) == 0 {
		panic("no return value specified for ContainerLogs")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, io.Writer) error); ok {
		r0 = returnFunc(ctx, containerID, w)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCommand2_ContainerLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerLogs'
type MockCommand2_ContainerLogs_Call struct {
	*mock.Call
}

// ContainerLogs is a helper method to define mock.On call
//   - ctx
//   - containerID
//   - w
func (_e *MockCommand2_Expecter) ContainerLogs(ctx interface{}, containerID interface{}, w interface{}) *MockCommand2_ContainerLogs_Call {
	return &MockCommand2_ContainerLogs_Call{Call: _e.mock.On("ContainerLogs", ctx, containerID, w)}
}

func (_c *MockCommand2_ContainerLogs_Call) Run(run func(ctx context.Context, containerID string, w io.Writer)) *MockCommand2_ContainerLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(io.Writer))
	})
	return _c
}

func (_c *MockCommand2_ContainerLogs_Call) Return(err error) *MockCommand2_ContainerLogs_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCommand2_ContainerLogs_Call) RunAndReturn(run func(ctx context.Context, containerID string, w io.Writer) error) *MockCommand2_ContainerLogs_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerStart provides a mock function for the type MockCommand2
func (_mock *MockCommand2) ContainerStart(ctx context.Context, options command.RunOptions) (string, error) {
	ret := _mock.Called(ctx, options)

	if len(ret) == 0 {
		panic("no return value specified for ContainerStart")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, command.RunOptions) (string, error)); ok {
		return returnFunc(ctx, options)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, command.RunOptions) string); ok {
		r0 = returnFunc(ctx, options)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, command.RunOptions) error); ok {
		r1 = returnFunc(ctx, options)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCommand2_ContainerStart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerStart'
type MockCommand2_ContainerStart_Call struct {
	*mock.Call
}

// ContainerStart is a helper method to define mock.On call
//   - ctx
//   - options
func (_e *MockCommand2_Expecter) ContainerStart(ctx interface{}, options interface{}) *MockCommand2_ContainerStart_Call {
	return &MockCommand2_ContainerStart_Call{Call: _e.mock.On("ContainerStart", ctx, options)}
}

func (_c *MockCommand2_ContainerStart_Call) Run(run func(ctx context.Context, options command.RunOptions)) *MockCommand2_ContainerStart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(command.RunOptions))
	})
	return _c
}

func (_c *MockCommand2_ContainerStart_Call) Return(s string, err error) *MockCommand2_ContainerStart_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockCommand2_ContainerStart_Call) RunAndReturn(run func(ctx context.Context, options command.RunOptions) (string, error)) *MockCommand2_ContainerStart_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerStop provides a mock function for the type MockCommand2
func (_mock *MockCommand2) ContainerStop(ctx context.Context, containerID string) error {
	ret := _mock.Called(ctx, containerID)

	if len(ret) == 0 {
		panic("no return value specified for ContainerStop")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, containerID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCommand2_ContainerStop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerStop'
type MockCommand2_ContainerStop_Call struct {
	*mock.Call
}

// ContainerStop is a helper method to define mock.On call
//   - ctx
//   - containerID
func (_e *MockCommand2_Expecter) ContainerStop(ctx interface{}, containerID interface{}) *MockCommand2_ContainerStop_Call {
	return &MockCommand2_ContainerStop_Call{Call: _e.mock.On("ContainerStop", ctx, containerID)}
}

func (_c *MockCommand2_ContainerStop_Call) Run(run func(ctx context.Context, containerID string)) *MockCommand2_ContainerStop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockCommand2_ContainerStop_Call) Return(err error) *MockCommand2_ContainerStop_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCommand2_ContainerStop_Call) RunAndReturn(run func(ctx context.Context, containerID string) error) *MockCommand2_ContainerStop_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAptTarFile provides a mock function for the type MockCommand2
func (_mock *MockCommand2) CreateAptTarFile(ctx context.Context, tmpDir string, aptTarFile string, packages ...string) (string, error) {
	var tmpRet mock.Arguments
	if len(packages) > 0 {
		tmpRet = _mock.Called(ctx, tmpDir, aptTarFile, packages)
	} else {
		tmpRet = _mock.Called(ctx, tmpDir, aptTarFile)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateAptTarFile")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...string) (string, error)); ok {
		return returnFunc(ctx, tmpDir, aptTarFile, packages...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...string) string); ok {
		r0 = returnFunc(ctx, tmpDir, aptTarFile, packages...)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, ...string) error); ok {
		r1 = returnFunc(ctx, tmpDir, aptTarFile, packages...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCommand2_CreateAptTarFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAptTarFile'
type MockCommand2_CreateAptTarFile_Call struct {
	*mock.Call
}

// CreateAptTarFile is a helper method to define mock.On call
//   - ctx
//   - tmpDir
//   - aptTarFile
//   - packages
func (_e *MockCommand2_Expecter) CreateAptTarFile(ctx interface{}, tmpDir interface{}, aptTarFile interface{}, packages ...interface{}) *MockCommand2_CreateAptTarFile_Call {
	return &MockCommand2_CreateAptTarFile_Call{Call: _e.mock.On("CreateAptTarFile",
		append([]interface{}{ctx, tmpDir, aptTarFile}, packages...)...)}
}

func (_c *MockCommand2_CreateAptTarFile_Call) Run(run func(ctx context.Context, tmpDir string, aptTarFile string, packages ...string)) *MockCommand2_CreateAptTarFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[3].([]string)
		run(args[0].(context.Context), args[1].(string), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockCommand2_CreateAptTarFile_Call) Return(s string, err error) *MockCommand2_CreateAptTarFile_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockCommand2_CreateAptTarFile_Call) RunAndReturn(run func(ctx context.Context, tmpDir string, aptTarFile string, packages ...string) (string, error)) *MockCommand2_CreateAptTarFile_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTarFile provides a mock function for the type MockCommand2
func (_mock *MockCommand2) CreateTarFile(ctx context.Context, ref string, tmpDir string, tarFile string, folder string) (string, error) {
	ret := _mock.Called(ctx, ref, tmpDir, tarFile, folder)

	if len(ret) == 0 {
		panic("no return value specified for CreateTarFile")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, string) (string, error)); ok {
		return returnFunc(ctx, ref, tmpDir, tarFile, folder)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, string) string); ok {
		r0 = returnFunc(ctx, ref, tmpDir, tarFile, folder)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string, string) error); ok {
		r1 = returnFunc(ctx, ref, tmpDir, tarFile, folder)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCommand2_CreateTarFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTarFile'
type MockCommand2_CreateTarFile_Call struct {
	*mock.Call
}

// CreateTarFile is a helper method to define mock.On call
//   - ctx
//   - ref
//   - tmpDir
//   - tarFile
//   - folder
func (_e *MockCommand2_Expecter) CreateTarFile(ctx interface{}, ref interface{}, tmpDir interface{}, tarFile interface{}, folder interface{}) *MockCommand2_CreateTarFile_Call {
	return &MockCommand2_CreateTarFile_Call{Call: _e.mock.On("CreateTarFile", ctx, ref, tmpDir, tarFile, folder)}
}

func (_c *MockCommand2_CreateTarFile_Call) Run(run func(ctx context.Context, ref string, tmpDir string, tarFile string, folder string)) *MockCommand2_CreateTarFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockCommand2_CreateTarFile_Call) Return(s string, err error) *MockCommand2_CreateTarFile_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockCommand2_CreateTarFile_Call) RunAndReturn(run func(ctx context.Context, ref string, tmpDir string, tarFile string, folder string) (string, error)) *MockCommand2_CreateTarFile_Call {
	_c.Call.Return(run)
	return _c
}

// ImageBuild provides a mock function for the type MockCommand2
func (_mock *MockCommand2) ImageBuild(ctx context.Context, options command.ImageBuildOptions) error {
	ret := _mock.Called(ctx, options)

	if len(ret) == 0 {
		panic("no return value specified for ImageBuild")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, command.ImageBuildOptions) error); ok {
		r0 = returnFunc(ctx, options)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCommand2_ImageBuild_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ImageBuild'
type MockCommand2_ImageBuild_Call struct {
	*mock.Call
}

// ImageBuild is a helper method to define mock.On call
//   - ctx
//   - options
func (_e *MockCommand2_Expecter) ImageBuild(ctx interface{}, options interface{}) *MockCommand2_ImageBuild_Call {
	return &MockCommand2_ImageBuild_Call{Call: _e.mock.On("ImageBuild", ctx, options)}
}

func (_c *MockCommand2_ImageBuild_Call) Run(run func(ctx context.Context, options command.ImageBuildOptions)) *MockCommand2_ImageBuild_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(command.ImageBuildOptions))
	})
	return _c
}

func (_c *MockCommand2_ImageBuild_Call) Return(err error) *MockCommand2_ImageBuild_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCommand2_ImageBuild_Call) RunAndReturn(run func(ctx context.Context, options command.ImageBuildOptions) error) *MockCommand2_ImageBuild_Call {
	_c.Call.Return(run)
	return _c
}

// ImageExists provides a mock function for the type MockCommand2
func (_mock *MockCommand2) ImageExists(ctx context.Context, ref string) (bool, error) {
	ret := _mock.Called(ctx, ref)

	if len(ret) == 0 {
		panic("no return value specified for ImageExists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return returnFunc(ctx, ref)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = returnFunc(ctx, ref)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, ref)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCommand2_ImageExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ImageExists'
type MockCommand2_ImageExists_Call struct {
	*mock.Call
}

// ImageExists is a helper method to define mock.On call
//   - ctx
//   - ref
func (_e *MockCommand2_Expecter) ImageExists(ctx interface{}, ref interface{}) *MockCommand2_ImageExists_Call {
	return &MockCommand2_ImageExists_Call{Call: _e.mock.On("ImageExists", ctx, ref)}
}

func (_c *MockCommand2_ImageExists_Call) Run(run func(ctx context.Context, ref string)) *MockCommand2_ImageExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockCommand2_ImageExists_Call) Return(b bool, err error) *MockCommand2_ImageExists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockCommand2_ImageExists_Call) RunAndReturn(run func(ctx context.Context, ref string) (bool, error)) *MockCommand2_ImageExists_Call {
	_c.Call.Return(run)
	return _c
}

// Inspect provides a mock function for the type MockCommand2
func (_mock *MockCommand2) Inspect(ctx context.Context, ref string) (*image.InspectResponse, error) {
	ret := _mock.Called(ctx, ref)

	if len(ret) == 0 {
		panic("no return value specified for Inspect")
	}

	var r0 *image.InspectResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*image.InspectResponse, error)); ok {
		return returnFunc(ctx, ref)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *image.InspectResponse); ok {
		r0 = returnFunc(ctx, ref)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*image.InspectResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, ref)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCommand2_Inspect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Inspect'
type MockCommand2_Inspect_Call struct {
	*mock.Call
}

// Inspect is a helper method to define mock.On call
//   - ctx
//   - ref
func (_e *MockCommand2_Expecter) Inspect(ctx interface{}, ref interface{}) *MockCommand2_Inspect_Call {
	return &MockCommand2_Inspect_Call{Call: _e.mock.On("Inspect", ctx, ref)}
}

func (_c *MockCommand2_Inspect_Call) Run(run func(ctx context.Context, ref string)) *MockCommand2_Inspect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockCommand2_Inspect_Call) Return(inspectResponse *image.InspectResponse, err error) *MockCommand2_Inspect_Call {
	_c.Call.Return(inspectResponse, err)
	return _c
}

func (_c *MockCommand2_Inspect_Call) RunAndReturn(run func(ctx context.Context, ref string) (*image.InspectResponse, error)) *MockCommand2_Inspect_Call {
	_c.Call.Return(run)
	return _c
}

// LoadUserInformation provides a mock function for the type MockCommand2
func (_mock *MockCommand2) LoadUserInformation(ctx context.Context, registryHost string) (*command.UserInfo, error) {
	ret := _mock.Called(ctx, registryHost)

	if len(ret) == 0 {
		panic("no return value specified for LoadUserInformation")
	}

	var r0 *command.UserInfo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*command.UserInfo, error)); ok {
		return returnFunc(ctx, registryHost)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *command.UserInfo); ok {
		r0 = returnFunc(ctx, registryHost)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*command.UserInfo)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, registryHost)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCommand2_LoadUserInformation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadUserInformation'
type MockCommand2_LoadUserInformation_Call struct {
	*mock.Call
}

// LoadUserInformation is a helper method to define mock.On call
//   - ctx
//   - registryHost
func (_e *MockCommand2_Expecter) LoadUserInformation(ctx interface{}, registryHost interface{}) *MockCommand2_LoadUserInformation_Call {
	return &MockCommand2_LoadUserInformation_Call{Call: _e.mock.On("LoadUserInformation", ctx, registryHost)}
}

func (_c *MockCommand2_LoadUserInformation_Call) Run(run func(ctx context.Context, registryHost string)) *MockCommand2_LoadUserInformation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockCommand2_LoadUserInformation_Call) Return(userInfo *command.UserInfo, err error) *MockCommand2_LoadUserInformation_Call {
	_c.Call.Return(userInfo, err)
	return _c
}

func (_c *MockCommand2_LoadUserInformation_Call) RunAndReturn(run func(ctx context.Context, registryHost string) (*command.UserInfo, error)) *MockCommand2_LoadUserInformation_Call {
	_c.Call.Return(run)
	return _c
}

// Pull provides a mock function for the type MockCommand2
func (_mock *MockCommand2) Pull(ctx context.Context, ref string, force bool) (*image.InspectResponse, error) {
	ret := _mock.Called(ctx, ref, force)

	if len(ret) == 0 {
		panic("no return value specified for Pull")
	}

	var r0 *image.InspectResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, bool) (*image.InspectResponse, error)); ok {
		return returnFunc(ctx, ref, force)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, bool) *image.InspectResponse); ok {
		r0 = returnFunc(ctx, ref, force)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*image.InspectResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, bool) error); ok {
		r1 = returnFunc(ctx, ref, force)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCommand2_Pull_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pull'
type MockCommand2_Pull_Call struct {
	*mock.Call
}

// Pull is a helper method to define mock.On call
//   - ctx
//   - ref
//   - force
func (_e *MockCommand2_Expecter) Pull(ctx interface{}, ref interface{}, force interface{}) *MockCommand2_Pull_Call {
	return &MockCommand2_Pull_Call{Call: _e.mock.On("Pull", ctx, ref, force)}
}

func (_c *MockCommand2_Pull_Call) Run(run func(ctx context.Context, ref string, force bool)) *MockCommand2_Pull_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(bool))
	})
	return _c
}

func (_c *MockCommand2_Pull_Call) Return(inspectResponse *image.InspectResponse, err error) *MockCommand2_Pull_Call {
	_c.Call.Return(inspectResponse, err)
	return _c
}

func (_c *MockCommand2_Pull_Call) RunAndReturn(run func(ctx context.Context, ref string, force bool) (*image.InspectResponse, error)) *MockCommand2_Pull_Call {
	_c.Call.Return(run)
	return _c
}

// Push provides a mock function for the type MockCommand2
func (_mock *MockCommand2) Push(ctx context.Context, ref string) error {
	ret := _mock.Called(ctx, ref)

	if len(ret) == 0 {
		panic("no return value specified for Push")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, ref)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCommand2_Push_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Push'
type MockCommand2_Push_Call struct {
	*mock.Call
}

// Push is a helper method to define mock.On call
//   - ctx
//   - ref
func (_e *MockCommand2_Expecter) Push(ctx interface{}, ref interface{}) *MockCommand2_Push_Call {
	return &MockCommand2_Push_Call{Call: _e.mock.On("Push", ctx, ref)}
}

func (_c *MockCommand2_Push_Call) Run(run func(ctx context.Context, ref string)) *MockCommand2_Push_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockCommand2_Push_Call) Return(err error) *MockCommand2_Push_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCommand2_Push_Call) RunAndReturn(run func(ctx context.Context, ref string) error) *MockCommand2_Push_Call {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function for the type MockCommand2
func (_mock *MockCommand2) Run(ctx context.Context, options command.RunOptions) error {
	ret := _mock.Called(ctx, options)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, command.RunOptions) error); ok {
		r0 = returnFunc(ctx, options)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCommand2_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type MockCommand2_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - ctx
//   - options
func (_e *MockCommand2_Expecter) Run(ctx interface{}, options interface{}) *MockCommand2_Run_Call {
	return &MockCommand2_Run_Call{Call: _e.mock.On("Run", ctx, options)}
}

func (_c *MockCommand2_Run_Call) Run(run func(ctx context.Context, options command.RunOptions)) *MockCommand2_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(command.RunOptions))
	})
	return _c
}

func (_c *MockCommand2_Run_Call) Return(err error) *MockCommand2_Run_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCommand2_Run_Call) RunAndReturn(run func(ctx context.Context, options command.RunOptions) error) *MockCommand2_Run_Call {
	_c.Call.Return(run)
	return _c
}
